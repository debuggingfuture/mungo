//TODO: to merge or not to merge with connector from that in fit-core


if (typeof define !== 'function') {
	var define = require('amdefine')(module);
}
define(['dropbox'], function(dropbox, connector) {

	var connector = {};

	//up to client 
	// connector.getPreviewLink = function(){

	// };
	//download=direct
	connector.getDirectLink = function(token, path, cb) {
		var options = {
			downloadHack: true
		};
		shareLink(token, path, options, cb);
	};

	var shareLink = function(token, path, options, cb) {
		var client = new dropbox.Client(token);
		// 	download (Boolean) — if set, the URL will be a direct download URL, instead of the usual Dropbox preview URLs; direct download URLs are short-lived (currently 4 hours), whereas regular URLs virtually have no expiration date (currently set to 2030); no direct download URLs can be generated for directories
		// downloadHack (Boolean) — if set, a long-living download URL will be generated by asking for a preview URL and using the officially documented hack at https://www.dropbox.com/help/201 to turn the preview URL into a download URL
		// long (Boolean) — if set, the URL will not be shortened using Dropbox's shortner; the download and downloadHack options imply long
		// longUrl (Boolean) — synonym for long; makes life easy for RhinoJS users

		client.makeUrl(path, options, function(err, res) {
			if (err) {
				return cb(err, null);

			}
			//TODO should normalize this response with other services
			//res
			// var res = {
			// 	url: url
			// };
			cb(null, res);
		})
	}

	connector.getSharedLink = function(token, path, cb) {
		var options = {};
		shareLink(token, path, options, cb);
		//share
		//return res
	};

connector.getThumbnailUrl = function(token, path, cb) {
		var client = new dropbox.Client(token);
				var options = {};
				// options['size']='small';
				console.log('getThumbnailUrl');
		// client.thumbnailUrl(path, options, function(err, res) {
		// 	console.log('thumbnail from dropbox')
		// 	console.log(err);
		// 	console.log(res);
		// 	cb(null,res);
		// })
	return 	client.thumbnailUrl(path, options);
	};

	//stream data directly
	connector.getThumbnail = function(token, path, cb) {
	var options = {};
options.buffer=true; //for nodejs
		var client = new dropbox.Client(token);
		client.readThumbnail(path, options, function(err, res) {
			console.log('got thumbnail res from dropbox')
if(err){
console.log('err');
		console.log(err);

}	
// callback (function(?Dropbox.ApiError, String|Blob, Dropbox.File.Stat)) — called with the result of the /thumbnails HTTP request; if the call succeeds, the second parameter is the image data as a String or Blob, the third parameter is a Dropbox.File.Stat instance describing the thumbnailed file, and the first argument is null
			console.log(res);
			cb(null,res);
		})
	};

	return connector;
	// describe('Dropbox', function() {
	// 	it('should return correct when token available', function() {
	// 		console.log('hihi');
	// 	});
	// });

	// dropbox
});